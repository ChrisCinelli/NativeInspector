//;modjewel.define("weinre/client/WeinreClientEventsImpl", function(require, exports, module) { // Generated by CoffeeScript 1.3.3
//	var Callback, Weinre, WeinreClientEventsImpl, WeinreExtraTargetEventsImpl, titleConnectedPrefix, titleNotConnected;
//
//	Callback = require('../common/Callback');
//
//	Weinre = require('../common/Weinre');
//
//	WeinreExtraTargetEventsImpl = require('./WeinreExtraTargetEventsImpl');
//
//	titleNotConnected = "weinre: target not connected";
//
//	titleConnectedPrefix = "weinre: ";
//
//	document.title = titleNotConnected;

var WeinreClientEventsImpl = (function() {

	function WeinreClientEventsImpl() {
	}

	WeinreClientEventsImpl.prototype.clientRegistered = function(clientDescription) {
		return WebInspector.panels.remote.addClient(clientDescription);
	};

	WeinreClientEventsImpl.prototype.targetRegistered = function(targetDescription) {
		WebInspector.panels.remote.addTarget(targetDescription);

		if (!Weinre.client.autoConnect()) {
			return;
		}
		if (!weinreMessageDispatcher) {
			return;
		}
		return Weinre.WeinreClientCommands.connectTarget(weinreMessageDispatcher.channel, targetDescription.channel);
	};

	WeinreClientEventsImpl.prototype.clientUnregistered = function(clientChannel) {
		return WebInspector.panels.remote.removeClient(clientChannel);
	};

	WeinreClientEventsImpl.prototype.targetUnregistered = function(targetChannel) {
		return WebInspector.panels.remote.removeTarget(targetChannel);
	};

	WeinreClientEventsImpl.prototype.connectionCreated = function(clientChannel, targetChannel) {
		var target;

		WebInspector.panels.remote.setClientState(clientChannel, "connected");
		WebInspector.panels.remote.setTargetState(targetChannel, "connected");
		if (clientChannel !== weinreMessageDispatcher.channel) {
			return;
		}
		WebInspector.panels.elements.reset();
		WebInspector.panels.timeline._clearPanel();
		WebInspector.panels.resources.reset();
		target = WebInspector.panels.remote.getTarget(targetChannel);
		if (!target) {
			return;
		}
		document.title = titleConnectedPrefix + target.url;
		WebInspector.inspectedURLChanged(target.url);
		return Weinre.WeinreExtraClientCommands.getDatabases(function(databaseRecords) {
			return WeinreExtraTargetEventsImpl.addDatabaseRecords(databaseRecords);
		});
	};

	WeinreClientEventsImpl.prototype.connectionDestroyed = function(clientChannel, targetChannel) {
		var nextTargetChannel;

		WebInspector.panels.remote.setClientState(clientChannel, "not-connected");
		WebInspector.panels.remote.setTargetState(targetChannel, "not-connected");
		if (clientChannel !== weinreMessageDispatcher.channel) {
			return;
		}
		document.title = titleNotConnected;
		if (!Weinre.client.autoConnect()) {
			return;
		}

		nextTargetChannel = WebInspector.panels.remote.getNewestTargetChannel(targetChannel);
		if (!nextTargetChannel) {
			return;
		}
		Weinre.WeinreClientCommands.connectTarget(weinreMessageDispatcher.channel, nextTargetChannel);
		return Weinre.logInfo("autoconnecting to " + nextTargetChannel);
	};

	WeinreClientEventsImpl.prototype.sendCallback = function(callbackId, result) {
		return Callback.invoke(callbackId, result);
	};

	WeinreClientEventsImpl.prototype.serverProperties = function(properties) {
		return WebInspector.panels.remote.setServerProperties(properties);
	};

	return WeinreClientEventsImpl;

})();